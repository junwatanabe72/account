var f=Object.defineProperty;var o=(a,e,t)=>e in a?f(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var i=(a,e,t)=>o(a,typeof e!="symbol"?e+"":e,t);class h{constructor(e=[]){i(this,"accounts",new Map);i(this,"changeListeners",[]);i(this,"transactionReferences",new Map);e.forEach(t=>this.accounts.set(t.code,t))}addAccount(e){const t={success:!0,affectedAccounts:[]};return this.accounts.has(e.code)?{success:!1,errors:[`口座コード ${e.code} は既に存在します`]}:(this.accounts.set(e.code,e),t.affectedAccounts=[e.code],this.notifyChange({type:"add",account:e,timestamp:new Date}),this.syncRelatedAccounts(e,"add",t),t)}updateAccount(e,t){const s={success:!0,affectedAccounts:[],affectedTransactions:[]},n=this.accounts.get(e);if(!n)return{success:!1,errors:[`口座コード ${e} が見つかりません`]};({...n});const c={...n,...t};if(this.accounts.set(e,c),s.affectedAccounts=[e],t.code&&t.code!==e){this.accounts.delete(e),this.accounts.set(t.code,c);const r=this.transactionReferences.get(e);r&&(s.affectedTransactions=Array.from(r),this.transactionReferences.delete(e),this.transactionReferences.set(t.code,r))}return this.notifyChange({type:"update",account:c,timestamp:new Date}),this.syncRelatedAccounts(c,"update",s),s}disableAccount(e){const t={success:!0,affectedAccounts:[],affectedTransactions:[]},s=this.accounts.get(e);if(!s)return{success:!1,errors:[`口座コード ${e} が見つかりません`]};s.isActive=!1,t.affectedAccounts=[e];const n=this.transactionReferences.get(e);return n&&n.size>0&&(t.affectedTransactions=Array.from(n)),this.notifyChange({type:"disable",account:s,timestamp:new Date}),this.syncRelatedAccounts(s,"disable",t),t}enableAccount(e){const t={success:!0,affectedAccounts:[]},s=this.accounts.get(e);return s?(s.isActive=!0,t.affectedAccounts=[e],this.notifyChange({type:"enable",account:s,timestamp:new Date}),this.syncRelatedAccounts(s,"enable",t),t):{success:!1,errors:[`口座コード ${e} が見つかりません`]}}deleteAccount(e,t=!1){const s={success:!0,affectedAccounts:[],affectedTransactions:[]},n=this.accounts.get(e);if(!n)return{success:!1,errors:[`口座コード ${e} が見つかりません`]};const c=this.transactionReferences.get(e);return!t&&c&&c.size>0?{success:!1,errors:[`口座 ${e} は ${c.size} 件の取引で使用されています。強制削除する場合は force オプションを使用してください。`],affectedTransactions:Array.from(c)}:(this.accounts.delete(e),this.transactionReferences.delete(e),s.affectedAccounts=[e],c&&(s.affectedTransactions=Array.from(c)),this.notifyChange({type:"delete",account:n,timestamp:new Date}),this.syncRelatedAccounts(n,"delete",s),s)}syncRelatedAccounts(e,t,s){const n=this.findTransactionsUsingPaymentAccount(e.code),c=this.findTransactionsUsingTransferAccount(e.code),r=new Set([...n,...c]);r.size>0&&(s.affectedTransactions||(s.affectedTransactions=[]),s.affectedTransactions.push(...Array.from(r))),(t==="disable"||t==="delete")&&r.size>0&&(s.errors||(s.errors=[]),s.errors.push(`口座 ${e.code} (${e.name}) の${t==="disable"?"無効化":"削除"}により、${r.size} 件の取引が影響を受けます。`))}findTransactionsUsingPaymentAccount(e){return this.transactionReferences.get(e)?Array.from(this.transactionReferences.get(e)):[]}findTransactionsUsingTransferAccount(e){const t=`transfer_${e}`;return this.transactionReferences.get(t)?Array.from(this.transactionReferences.get(t)):[]}registerTransactionReference(e,t,s=!1){const n=s?`transfer_${t}`:t;this.transactionReferences.has(n)||this.transactionReferences.set(n,new Set),this.transactionReferences.get(n).add(e)}unregisterTransactionReference(e,t,s=!1){const n=s?`transfer_${t}`:t,c=this.transactionReferences.get(n);c&&(c.delete(e),c.size===0&&this.transactionReferences.delete(n))}addChangeListener(e){this.changeListeners.push(e)}removeChangeListener(e){const t=this.changeListeners.indexOf(e);t>-1&&this.changeListeners.splice(t,1)}notifyChange(e){this.changeListeners.forEach(t=>t(e))}getAccounts(e=!1){const t=Array.from(this.accounts.values());return e?t:t.filter(s=>s.isActive)}getAccount(e){return this.accounts.get(e)}getTransferableCombinations(){const e=this.getAccounts(!1),t=[];return e.forEach(s=>{const n=e.filter(c=>s.id===c.id?!1:s.division==="KANRI"&&c.division==="SHUZEN"||s.division==="SHUZEN"&&c.division==="KANRI"||s.division===c.division);n.length>0&&t.push({from:s,to:n})}),t}getPaymentAccounts(e){const t=this.getAccounts(!1);return e?t.filter(s=>s.division==="BOTH"?!0:s.division===e):t}}export{h as B};
